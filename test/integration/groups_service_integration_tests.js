/*
== BSD2 LICENSE ==
Copyright (c) 2014, Tidepool Project

This program is free software; you can redistribute it and/or modify it under
the terms of the associated License, which is identical to the BSD 2-Clause
License as published by the Open Source Initiative at opensource.org.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the License for more details.

You should have received a copy of the License along with this program; if
not, you can obtain one from Tidepool Project at tidepool.org.
== BSD2 LICENSE ==
 */

'use strict';

var fixture = require('./../helpers/fixtures.js'),
/*jshint unused:false */
    should = fixture.should,
    supertest = fixture.supertest,
    armadaTestHelper = fixture.armadaTestHelper,
    testGroups = fixture.testData.relatedSet,
    testGroup = fixture.testData.individual,
    sessionToken = armadaTestHelper.sessiontoken,
    apiEndPoint,
    testDbInstance;

/*
    Running the groups API using the mongo backend via the handler 
*/
describe('Groups API', function() {

    before(function(){

        /*
        Setup
        */
        var config,
            mongoHandler;

        config = armadaTestHelper.testConfig;    
    
        mongoHandler = require('../../lib/handler/MongoHandler')(config.mongoDbConnectionString);

        //fake hakken functionality 
        var fakeHostGetter = {};
        fakeHostGetter.get = function(){
            return [{host:'http://localhost:'+config.userApiPort}];
        };
        
        armadaTestHelper.initArmadaService(mongoHandler,fakeHostGetter);
        testDbInstance = armadaTestHelper.createMongoInstance();
        apiEndPoint = armadaTestHelper.testServiceEndpoint();

        /*
        Clean and then load our test data
        */
        testDbInstance.groups.remove();

        testGroups.forEach(function(group) {
            testDbInstance.groups.save(group);
        });
    });

    describe('POST /', function() {

        it('returns 400 when given an invalid group to create', function(done) {

            var badGroup = {
                nothing : ''
            };

            supertest(apiEndPoint)
            .post('/')
            .send({group:badGroup})
            .set('X-Tidepool-Session-Token', sessionToken)
            .expect(400)
            .end(function(err, res) {
                if (err) return done(err);
                done();
            });
        });

        it('returns 400 when no data is sent', function(done) {

            supertest(apiEndPoint)
            .post('/')
            .set('X-Tidepool-Session-Token', sessionToken)
            .expect(400)
            .end(function(err, res) {
                if (err) return done(err);
                done();
            });
        });

        it('returns id with 201 response', function(done) {

            var testGroupFor201 = testGroup;

            supertest(apiEndPoint)
            .post('/')
            .send({group:testGroupFor201})
            .set('X-Tidepool-Session-Token', sessionToken)
            .expect(201)
            .end(function(err, res) {
                if (err) return done(err);
                res.body.should.have.property('id');
                res.body.id.should.not.equal('');
                done();
            });
        });

        it('id is valid', function(done) {

            var groupToAdd = testGroup;

            supertest(apiEndPoint)
            .post('/')
            .send({group:groupToAdd})
            .set('X-Tidepool-Session-Token', sessionToken)
            .expect(201)
            .end(function(err, res) {
                if (err) return done(err);

                //TODO: id will be generated by tidepool not mongo    

                done();
            });
        });
        
    });

    describe('GET /membership/:userid/member', function() {

        it('returns 200 and two groups when I ask for 3343', function(done) {

            supertest(apiEndPoint)
            .get('/membership/3343/member')
            .set('X-Tidepool-Session-Token', sessionToken)
            .expect(200)
            .end(function(err, res) {
                if (err) return done(err);

                res.body.groups.length.should.equal(2);

                done();
            });
        });

        it('the groups should be valid', function(done) {

            supertest(apiEndPoint)
            .get('/membership/3343/member')
            .set('X-Tidepool-Session-Token', sessionToken)
            .expect(200)
            .end(function(err, res) {
                if (err) return done(err);

                var foundGroups = res.body.groups;

                foundGroups.forEach(function(group){
                    armadaTestHelper.validateGroup(group).should.equal(true);
                });

                done();
            });
        });
    });

    describe('POST /:groupid/user', function() {

        var testGroupContent;

        before(function(done){
            //Get existing group to use in tests 
            testDbInstance.groups.findOne({},function(err, doc) {
                testGroupContent = doc;
                done();
            });
        });

        it('returns 200 when user is added to the group', function(done) {

            var groupId = testGroupContent._id;
            var userToAdd = '12345997';

            supertest(apiEndPoint)
            .post('/'+groupId+'/user')
            .set('X-Tidepool-Session-Token', sessionToken)
            .send({userid : userToAdd})
            .expect(200)
            .end(function(err, res) {
                if (err) return done(err);
            
                res.body.should.have.property('group');

                done();
            });
        });

        it('the updated group is returned with the new user and is valid', function(done) {

            var groupId = testGroupContent._id;
            var userToAdd = '12345997';

            supertest(apiEndPoint)
            .post('/'+groupId+'/user')
            .set('X-Tidepool-Session-Token', sessionToken)
            .send({userid : userToAdd})
            .expect(200)
            .end(function(err, res) {
                if (err) return done(err);
                //get the group and check
                var updatedGroup = res.body.group;
                updatedGroup.members.should.contain(userToAdd);
                armadaTestHelper.validateGroup(updatedGroup).should.equal(true);

                done();
            });
        });

    });

    describe('DELETE /:groupid/user', function() {

        var testdelUserGroup;

        before(function(done){
            //Get existing group to use in tests 
            testDbInstance.groups.findOne(function(err, doc) {
                testdelUserGroup = doc;
                done();
            });
        });

        it('returns 200 and the updated group when user is removed from the group', function(done) {

            var groupId = testdelUserGroup._id;
            var userToRemove = testdelUserGroup.members[1];

            supertest(apiEndPoint)
            .del('/'+groupId+'/user')
            .set('X-Tidepool-Session-Token', sessionToken)
            .send({userid : userToRemove})
            .expect(200)
            .end(function(err, res) {
                if (err) return done(err);
                res.body.should.have.property('group');
                done();
            });
        });

        it('the updated group does not contain the user and is valid', function(done) {

            var groupId = testdelUserGroup._id;
            var userToRemove = testdelUserGroup.members[1];

            supertest(apiEndPoint)
            .del('/'+groupId+'/user')
            .set('X-Tidepool-Session-Token', sessionToken)
            .send({userid : userToRemove})
            .expect(200)
            .end(function(err, res) {
                if (err) return done(err);
                //get the group and check
                var updatedGroup = res.body.group;
                updatedGroup.members.should.not.contain(userToRemove);

                armadaTestHelper.validateGroup(updatedGroup).should.equal(true);

                done();
            });
        });

        it('returns 200 when try to remove a user that is not in the group anyway', function(done) {

            //i am just guessing????
            var groupId = testdelUserGroup._id;
            var userToRemove = '123xx45997';

            supertest(apiEndPoint)
            .del('/deluser/'+groupId)
            .set('X-Tidepool-Session-Token', sessionToken)
            .send({userid : userToRemove})
            .expect(200,done());
        });

    });

    describe('GET /:groupid/members', function() {

        var groupToGetMembersFor;

        before(function(done){
            //Get existing group to use in tests 
            testDbInstance.groups.findOne(function(err, doc) {
                groupToGetMembersFor = doc;
                done();
            });
        });

        it('returns 200 and the updated group when user is removed from the group', function(done) {

            var groupId = groupToGetMembersFor._id;

            supertest(apiEndPoint)
            .get('/'+groupId+'/members')
            .set('X-Tidepool-Session-Token', sessionToken)
            .expect(200)
            .end(function(err, res) {
                if (err) return done(err);
                res.body.should.have.property('members');
                done();
            });
        });

    });

});
/*
== BSD2 LICENSE ==
Copyright (c) 2014, Tidepool Project

This program is free software; you can redistribute it and/or modify it under
the terms of the associated License, which is identical to the BSD 2-Clause
License as published by the Open Source Initiative at opensource.org.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the License for more details.

You should have received a copy of the License along with this program; if
not, you can obtain one from Tidepool Project at tidepool.org.
== BSD2 LICENSE ==
*/

'use strict';

var salinity = require('salinity');

var expect = salinity.expect;
var sinon = salinity.sinon;
var mockableObject = salinity.mockableObject;


var env = {
  httpPort: 21000,
  mongoConnectionString: 'mongodb://localhost/test_armada'
};

var userApiClient = mockableObject.make('checkToken');

var mongoHandler = require('../../lib/handler/mongoHandler')(env.mongoConnectionString);


var armada = require('../../lib/armadaService')(
  env,
  mongoHandler,
  userApiClient,
  require('../helpers/mockSeagullHandler')()
);

var supertest = require('supertest')('http://localhost:' + env.httpPort);
var testDbInstance = require('mongojs')(env.mongoConnectionString, ['groups']);

var armadaUser = { userid: 'armada', isserver: true };
var testGroups = require('../data/testGroupsData').relatedSet;
var testGroup = require('../data/testGroupsData').individual;
var sessiontoken = '99406ced-8052-49c5-97ee-547cc3347da6';


/*
Running the groups API using the mongo backend via the handler
*/
describe('Groups API', function() {

  function setupToken(user) {
    sinon.stub(userApiClient, 'checkToken').callsArgWith(1, null, user);
  }

  function expectToken(token) {
    expect(userApiClient.checkToken).to.have.been.calledWith(token, sinon.match.func);
  }

  function validateGroup(group){
    if (('id' in group) &&
        ('members' in group && group.members.length > 0))
    {
      return true;
    } else {
      return false;
    }
  }

  before(function (done) {

    testDbInstance.groups.remove();

    testGroups.forEach(function(group) {
      testDbInstance.groups.save(group);
    });

    armada.start(done);

    setupToken(armadaUser);

  });

  after(function () {
    armada.stop();
  });

  describe('POST /', function() {

    it('returns 400 when given an invalid group to create', function(done) {

      var badGroup = {
        nothing : ''
      };

      supertest
      .post('/')
      .send({group:badGroup})
      .set('X-Tidepool-Session-Token', sessiontoken)
      .expect(400)
      .end(function(err, res) {
        if (err) return done(err);
        expectToken(sessiontoken);
        done();
      });
    });

    it('returns 400 when no data is sent', function(done) {

      supertest
      .post('/')
      .set('X-Tidepool-Session-Token', sessiontoken)
      .expect(400)
      .end(function(err, res) {
        if (err) return done(err);
        expectToken(sessiontoken);
        done();
      });
    });

    it('returns id with 201 response', function(done) {

      var testGroupFor201 = testGroup;

      supertest
      .post('/')
      .send({group:testGroupFor201})
      .set('X-Tidepool-Session-Token', sessiontoken)
      .expect(201)
      .end(function(err, res) {
        if (err) return done(err);
        expect(res.body).have.property('id');
        expect(res.body.id).not.equal('');
        expectToken(sessiontoken);
        done();
      });
    });

    it('id is valid', function(done) {

      var groupToAdd = testGroup;

      supertest
      .post('/')
      .send({group:groupToAdd})
      .set('X-Tidepool-Session-Token', sessiontoken)
      .expect(201)
      .end(function(err, res) {
        if (err) return done(err);
        //TODO: id will be generated by tidepool not mongo
        expectToken(sessiontoken);
        done();
      });
    });

  });

  describe('GET /membership/:userid/member', function() {

    it('returns 200 and two groups when I ask for 3343', function(done) {

      supertest
      .get('/membership/3343/member')
      .set('X-Tidepool-Session-Token', sessiontoken)
      .expect(200)
      .end(function(err, res) {
        if (err) return done(err);

        expect(res.body.groups.length).equal(2);
        expectToken(sessiontoken);
        done();
      });
    });

    it('the groups should be valid', function(done) {

      supertest
      .get('/membership/3343/member')
      .set('X-Tidepool-Session-Token', sessiontoken)
      .expect(200)
      .end(function(err, res) {
        if (err) return done(err);

        var foundGroups = res.body.groups;

        foundGroups.forEach(function(group){
          expect(validateGroup(group)).is.equal(true);
        });
        expectToken(sessiontoken);

        done();
      });
    });
  });

  describe('PUT /:groupid/user', function() {

    var testGroupContent;

    before(function(done){
      //Get existing group to use in tests
      testDbInstance.groups.findOne({},function(err, doc) {
        testGroupContent = doc;
        done();
      });
    });

    it('returns 200 when user is added to the group', function(done) {

      var groupId = testGroupContent._id;
      var userToAdd = '12345997';

      supertest
      .put('/'+groupId+'/user')
      .set('X-Tidepool-Session-Token', sessiontoken)
      .send({userid : userToAdd})
      .expect(200)
      .end(function(err, res) {
        if (err) return done(err);

        expect(res.body).have.property('group');
        expectToken(sessiontoken);

        done();
      });
    });

    it('the updated group is returned with the new user and is valid', function(done) {

      var groupId = testGroupContent._id;
      var userToAdd = '12345997';

      supertest
      .put('/'+groupId+'/user')
      .set('X-Tidepool-Session-Token', sessiontoken)
      .send({userid : userToAdd})
      .expect(200)
      .end(function(err, res) {
        if (err) return done(err);
        //get the group and check
        var updatedGroup = res.body.group;
        expect(updatedGroup.members).contain(userToAdd);
        expect(validateGroup(updatedGroup)).is.equal(true);
        expectToken(sessiontoken);
        done();
      });
    });

  });

  describe('DELETE /:groupid/user', function() {

    var testdelUserGroup;

    before(function(done){
      //Get existing group to use in tests
      testDbInstance.groups.findOne(function(err, doc) {
        testdelUserGroup = doc;
        done();
      });
    });

    it('returns 204 when user is removed from the group', function(done) {

      var groupId = testdelUserGroup._id;
      var userToRemove = testdelUserGroup.members[1];

      supertest
      .del('/'+groupId+'/user')
      .set('X-Tidepool-Session-Token', sessiontoken)
      .send({userid : userToRemove})
      .expect(204)
      .end(function(err, res) {
        if (err) return done(err);
        expectToken(sessiontoken);
        done();
      });
    });

    it('returns 404 when try to remove a user that is not in the group anyway', function(done) {

      var groupId = testdelUserGroup._id;
      var userToRemove = '123xx45997';

      supertest
      .del('/deluser/'+groupId)
      .set('X-Tidepool-Session-Token', sessiontoken)
      .send({userid : userToRemove})
      .expect(404)
      .end(function(err, res) {
        if (err) return done(err);
        expectToken(sessiontoken);
        done();
      });
    });

  });


  describe('GET /:groupid/members', function() {

    var groupToGetMembersFor;

    before(function(done){
      //Get existing group to use in tests
      testDbInstance.groups.findOne(function(err, doc) {
        groupToGetMembersFor = doc;
        done();
      });
    });

    it('returns 200 and the updated group when user is removed from the group', function(done) {

      var groupId = groupToGetMembersFor._id;

      supertest
      .get('/'+groupId+'/members')
      .set('X-Tidepool-Session-Token', sessiontoken)
      .expect(200)
      .end(
        function(err, res) {
          if (err) {
            return done(err);
          }
          expectToken(sessiontoken);
          expect(res.body).have.property('members');
          done();
        });
    });

  });

});